// src/api/children/children.js

import express from "express";
import { body, param } from "express-validator"; // âœ… Validaciones
import {
  getAllChildren,
  getChildById,
  createChild,
  updateChild,
  deleteChild,
} from "../../controllers/childController.js";
import validateRequest from "../../middleware/validateRequest.js"; // Middleware para validaciones

const router = express.Router();

// ğŸ“Œ Obtener todos los hijos
router.get("/", getAllChildren);

// ğŸ“Œ Obtener un hijo por ID con validaciÃ³n
router.get(
  "/:id",
  param("id").isInt().withMessage("El ID debe ser un nÃºmero entero vÃ¡lido."),
  validateRequest,
  getChildById
);

// ğŸ“Œ Crear un nuevo hijo con validaciones
router.post(
  "/",
  [
    body("name").notEmpty().withMessage("El nombre es obligatorio."),
    body("dateOfBirth")
      .isISO8601()
      .withMessage("La fecha de nacimiento debe ser en formato ISO8601."),
    body("parentalAccountId")
      .isInt()
      .withMessage("El parentalAccountId debe ser un nÃºmero entero."),
    body("userId").isInt().withMessage("El userId debe ser un nÃºmero entero."),
  ],
  validateRequest,
  createChild
);

// ğŸ“Œ Actualizar un hijo con validaciones
router.put(
  "/:id",
  [
    param("id").isInt().withMessage("El ID debe ser un nÃºmero entero vÃ¡lido."),
    body("name")
      .optional()
      .notEmpty()
      .withMessage("El nombre no puede estar vacÃ­o."),
    body("dateOfBirth")
      .optional()
      .isISO8601()
      .withMessage("La fecha de nacimiento debe ser en formato ISO8601."),
  ],
  validateRequest,
  updateChild
);

// ğŸ“Œ Eliminar un hijo con validaciÃ³n de ID
router.delete(
  "/:id",
  param("id").isInt().withMessage("El ID debe ser un nÃºmero entero vÃ¡lido."),
  validateRequest,
  deleteChild
);

// ğŸ“Œ Manejo de rutas inexistentes
router.use((req, res) => {
  res.status(404).json({
    status: "error",
    message: "Ruta no encontrada en /api/children.",
  });
});

export default router;
